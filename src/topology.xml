<?xml version="1.0"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="topology">
	<title>Topology</title>
	<info>
	</info>
	<para>
		The definition of the topology by the user has to be simple and powerful at the same time. The simple and powerful so called topology language has been developed. The basic building block of the system is a task. Namely, a task is a user defined executable or a shell script, which will be deployed and executed by DDS on a Resource Management System. To describe dependencies between tasks in a topology we use properties. For example, if one task wants to communicate with another task they can have the same property of a type TCP/IP port. In this case DDS will notice that and set this number to configuration files of both user processes. Moreover, there will be different types of properties, for example, tasks can be dependent on each other via a file or a named pipe.
	</para>
	<para>
	Tasks can be grouped into DDS collections and DDS groups. The difference between collections and groups is that collections are a signal to DDS topology parser that tasks of given collections will be executed on the same physical machine. This is useful if tasks have a lot of communication or they want to access the same shared memory. A set of tasks and task collections can be also grouped into task groups. Only group define multiplication factor for all its daughter elements.
	</para>
	<para>
		Main group defines the entry point for task execution. Only main group can contain other groups.
    </para>
	<para>
		For the moment topology is described in the XML file. XML is chosen because it can be validated against XSD schema. XSD schema file can be found in <filename>dds-install-dir/share/topology.xsd</filename>. 
	</para>
	<sect1 xml:id="topology-section1">
		<title>General description of XML file</title>
		<screen><![CDATA[
<topology name="myTopology">
   [... Definition of tasks, properties, and collections ...]
   <main name="main">
      [... Definition of the topology itself, where also groups can be defined ...]
   </main>
</topology>]]></screen>
    <para>
		In the upper part of the XML file properties, tasks and collections which are later used in the main block are defined. In the main block topology itself is defined. Groups and multiplication factors are also defined in main block.
	</para>
	</sect1>
	<sect1 xml:id="topology-section2">
		<title>XML file example</title>
		<screen><![CDATA[
<topology name="myTopology">
	
   <property id="property1" />
   <property id="property2" />

   <decltask id="task1">
      <exe reachable="true">app1 -l -n</exe>
      <env reachable="false">env1</env>
      <properties>
         <id>property1</id>
         <id>property2</id>
      </properties>
   </decltask>
   <decltask id="task2">
      <exe>app2</exe>
      <properties>
         <id>property1</id>
      </properties>
   </decltask>

   <declcollection id="collection1">
      <task>task1</task>
      <task>task2</task>
      <task>task2</task>
   </declcollection>
   
   <declcollection id="collection2">
      <task>task1</task>
      <task>task1</task>
   </declcollection>
	
   <main id="main">
      <task>task1</task>
      <collection>collection1</collection>
      <group id="group1" n="10">
         <task>task1</task>
         <collection>collection1</collection>
         <collection>collection2</collection>
      </group>
      <group id="group2" n="15">
         <collection>collection1</collection>
      </group>
   </main>
	
</topology>
]]></screen>
    <para>
		In the example above we define 2 properties - <emphasis>property1</emphasis> and <emphasis>property2</emphasis>. As you can see <tag>property</tag> tag is used to define properties. <emphasis>id</emphasis> attribute is required and has to be unique for all properties. 
	</para>
	<para>
		In the next block we define tasks. For this <tag>decltask</tag> tag is used. As properties tasks also have <tag>id</tag> attribute which is required and has to be unique for all declared tasks. <tag>exe</tag> element defines path to executable. It has optional attribute <tag>reachable</tag> which defines if executable is available on the worker node. If any script that sets environment has to be executed prior to main executable one can specify it using <tag>env</tag> element. <tag>env</tag> also have <tag>reachable</tag> attribute which defines if script is available on the worker node or not. If task depends on the properties this can de specified using <tag>properties</tag> tag together with a list of <tag>id</tag> elements which specified id of already declared properties. Property must be declared before it can be used in the task. 
	</para>
	<para>
		Collections are declared using <tag>declcollection</tag> tag. It containes a list of <tag>task</tag> tags with IDs which specified already declared tasks. Task has to be declared before it can be used in the collection.
	</para>
	<para>
		The <tag>main</tag> tag declares the topology itself. In the example our main block consists of one task (<emphasis>task1</emphasis>), one collection (<emphasis>collection1</emphasis>) and two groups (<emphasis>group1</emphasis> and <emphasis>group2</emphasis>). In the main block two groups are declared. Group is declared using <tag>group</tag> tag. It has a required attribute <tag>id</tag> which is used to uniquely identify the group and optional attribute <tag>n</tag> which defines multiplication factor for the group. In the example <emphasis>group1</emphasis> consists of one task (<emphasis>task1</emphasis>) and two collections (<emphasis>collection1</emphasis> and <emphasis>collection2</emphasis>). <emphasis>group2</emphasis> consists of one collection (<emphasis>collection1</emphasis>).
	</para>
	</sect1>
	<sect1 xml:id="topology-section3">
		<title>XML tag reference</title>
		<table>
			<title>XML tags</title>
			<tgroup cols="2">
				<thead>
					<row><entry>Tag</entry><entry>Description</entry></row>
				</thead>
				<tbody>
					<row><entry><tag>property</tag></entry><entry>Declares property.</entry></row>
					<row><entry><tag>decltask</tag></entry><entry>Declares task.</entry></row>
					<row><entry><tag>declcollection</tag></entry><entry>Declares collection.</entry></row>
					<row><entry><tag>group</tag></entry><entry>Declares group.</entry></row>
					<row><entry><tag>main</tag></entry><entry>Declares main group.</entry></row>
				</tbody>
			</tgroup>
		</table>
	</sect1>
</chapter>
